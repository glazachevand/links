@mixin font($size, $lineHeight, $font-weight, $letter-spacing, $fontFamily) {
  font-size: $size;
  line-height: $lineHeight;
  font-weight: $font-weight;
  letter-spacing: $letter-spacing;
  font-family: $fontFamily;
}

@mixin font($font_name, $file_name, $weight, $style) {
  @font-face {
    font-family: $font_name;
    font-display: swap;
    src: url("../fonts/#{$file_name}.woff") format("woff"), url("../fonts/#{$file_name}.woff2") format("woff2");
    font-weight: #{$weight};
    font-style: #{$style};
  }
}


@mixin media($minWidth) {
  @media only screen and (min-width: $minWidth) {
    @content;
  }
}

$maxWidth: 1280;
$maxWidthContainer: 768;

@mixin adaptive-value($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type==1 {
    // Только если меньше контейнера
    #{$property}: $startSize + px;
    @media (max-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize}* ((100vw - 320px) / #{$maxWidthContainer -
              320})
      );
    }
  } @else if $type==2 {
    // Только если больше контейнера
    #{$property}: $startSize + px;
    @media (min-width: #{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize}* ((100vw - 320px) / #{$maxWidth - 320})
      );
    }
  } @else {
    // Всегда
    #{$property}: calc(
      #{$minSize + px} + #{$addSize}* ((100vw - 320px) / #{$maxWidth - 320})
    );
  }
}
